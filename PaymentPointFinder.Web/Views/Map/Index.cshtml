@using System.ComponentModel
@using PaymentPointFinder.Core.Models
@model MapViewModel

@{
    ViewBag.Title = "Payment Points Map";
    Layout = "_Layout";
    System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
}

<div class="text-center">
    <h1 class="display-4">Mappa dei punti di pagamento</h1>
</div>

<style>
    #map {
        width: 800px;
        height: 800px;
    }

    .selected-marker-icon {
        filter: hue-rotate(90deg);
    }
    
    #payment-point-info {
        top: 10px;
        right:  10px;
        position: absolute;
        z-index: 1000;
        background-color: rgba(242, 242, 242, 0.8);
        padding: 10px;
        border-radius: 5px;
    }
</style>

<div class="d-flex justify-content-center">
    <div id="map">
        <div id="payment-point-info" class="d-none">
            <div id="payment-point-info-text"></div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

<script>
    let map = null;
    let userMarker = null;
    let selectedMarker = null;
    let distanceSegment = null;
    let popup = null;

    function showPaymentPointInfo(data) {
        document.getElementById('payment-point-info-text').innerHTML = `
            <strong>${data.DENOM}</strong><br>
            Categoria: ${data.SOTTOCAT}<br>
            Indirizzo: ${data.INDIRIZZO}<br>
            CAP: ${data.CAP}<br>
            ${data.SERVIZIO ? `Servizio: ${data.SERVIZIO}<br>` : ``}
            ${data.BRAND ? `Brand: ${data.BRAND}<br>` : ``}
            ${data.LINK ? `Sito: <a target="_blank" href=${data.LINK}>${data.LINK}</a><br>` : ``}
        `;
        
        document.getElementById('payment-point-info').classList.remove("d-none");
    }

    function defaultIcon() {
        return new L.Icon.Default();
    }

    function selectedIcon() {
        return new L.Icon.Default({ className: 'selected-marker-icon' });
    }

    function cleanupDistanceWidgets() {
        if (distanceSegment) {
            map.removeLayer(distanceSegment);
        }

        if (popup) {
            map.removeLayer(popup);
        }
    }

    function displayDistance() {
        if (userMarker && selectedMarker) {
            cleanupDistanceWidgets();

            let userLatLng = userMarker.getLatLng();
            let selectedLatLng = selectedMarker.getLatLng();

            distanceSegment = L.polyline([userLatLng, selectedLatLng],
                { color: 'blue', weight: 2, dashArray: '8, 12' }).addTo(map);

            var popupPosition = L.latLng(
                (userLatLng.lat + selectedLatLng.lat) / 2,
                (userLatLng.lng + selectedLatLng.lng) / 2
            );

            popup = L.popup({ closeButton: false }).setLatLng(popupPosition)
                .setContent(`Distanza: ${(map.distance(userLatLng, selectedLatLng) / 1000).toFixed(3)} km`)
                .addTo(map);
        }
    }

    function setupPaymentPoint(point) {
        let marker = L.marker([point.YWGS84, point.xWGS84]).bindTooltip(point.DENOM + ' - ' + point.SOTTOCAT, {
            direction: 'top',
            offset: [-15, -10],
            permanent: false,
        }).addTo(map);

        marker.paymentPointData = point;

        marker.on('click', function (e) {
            // Change the old one's icon
            if (selectedMarker != null) {
                selectedMarker.setIcon(defaultIcon());
            }

            selectedMarker = marker;
            selectedMarker.setIcon(selectedIcon());

            showPaymentPointInfo(marker.paymentPointData);
            
            displayDistance();
        });
    }

    function loadMap() {
        let lat = @Model.DefaultLatitude;
        let long = @Model.DefaultLongitude;
        let zoom = @Model.DefaultZoom;
        let points = @Json.Serialize(Model.Points);
        map = L.map('map').setView([lat, long], zoom);

        points.forEach(setupPaymentPoint);

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
    }

    function setupUserMarker() {
        userMarker = null;

        map.on('dblclick', function (e) {
            if (userMarker) {
                map.removeLayer(userMarker);
            }

            userMarker = L.marker([e.latlng.lat, e.latlng.lng])
                .on('click', function (e) {
                    map.removeLayer(userMarker);
                    userMarker = null;
                    cleanupDistanceWidgets();
                }).addTo(map);

            displayDistance();
        });
    }

    loadMap();
    setupUserMarker();
</script>